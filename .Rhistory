runApp()
runApp()
runApp()
View(pmfr)
runApp()
runApp()
df <- pmfr
library(corrplot)
df <- pmfr
reducedData <- select(df, -Time)
na.omit(reducedData)
corMatrix = cor(reducedData)
View(corMatrix)
View(reducedData)
library(corrplot)
df <- pmfr
reducedData <- select(df, -Time)
View(reducedData)
reducedData <- na.omit(reducedData)
View(reducedData)
corMatrix = cor(reducedData)
View(corMatrix)
runApp()
corrplot(corMatrix)
corrplot(corMatrix, method = "number")
runApp()
runApp()
# Correlation Matrix
library(corrplot)
df <- pmfr
reducedData <- na.omit(select(df, -Time))
corMatrix = cor(reducedData)
corrplot(corMatrix, method = "number")
View(reducedData)
View(reducedData)
View(corMatrix)
corrplot(corMatrix, method = "color")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?br()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(ggplot2)
library(visreg)
library(caret)
library(ggplot2)
library(visreg)
library(caret)
df <- pmfr
df <- pmfr
head(df)
df <- pmfr(-Time)
df <- select(pmfr, -Time)
head(df)
set.seed(100)
TrainingIndex <- createDataPartition(df$MFR, p=0.8, list = FALSE)
TrainingSet <- df[TrainingIndex,] # Training Set
TestingSet <- df[-TrainingIndex,] # Test Set
set.seed(100)
TrainingIndex <- createDataPartition(df$MFR, p=0.5, list = FALSE)
TrainingSet <- df[TrainingIndex,] # Training Set
TestingSet <- df[-TrainingIndex,] # Test Set
View(TestingSet)
View(TestingSet)
set.seed(100)
TrainingIndex <- createDataPartition(df$MFR, p=0.8, list = FALSE)
TrainingSet <- df[TrainingIndex,] # Training Set
TestingSet <- df[-TrainingIndex,] # Test Set
View(TestingSet)
View(TestingSet)
# Build Training model
Model <- train(MFR ~ ., data = TrainingSet,
method = "lm",
na.action = na.omit,
preProcess=c("scale","center"),
trControl= trainControl(method="none")
)
View(Model)
View(Model)
Model.training <-predict(Model, TrainingSet) # Apply model to make prediction on Training set
Model.testing <-predict(Model, TestingSet) # Apply model to make prediction on Testing set
plot(TrainingSet$MFR,Model.training, col = "blue" )
View(df)
View(df)
# Build Training model
Model <- train(MFR ~ Pressure, data = TrainingSet,
method = "lm",
na.action = na.omit,
preProcess=c("scale","center"),
trControl= trainControl(method="none")
)
Model.training <-predict(Model, TrainingSet) # Apply model to make prediction on Training set
Model.testing <-predict(Model, TestingSet) # Apply model to make prediction on Testing set
plot(TrainingSet$MFR,Model.training, col = "blue" )
df <- na.omit(select(pmfr, -Time))
head(df)
set.seed(100)
TrainingIndex <- createDataPartition(df$MFR, p=0.8, list = FALSE)
TrainingSet <- df[TrainingIndex,] # Training Set
TestingSet <- df[-TrainingIndex,] # Test Set
# Build Training model
Model <- train(MFR ~ Pressure, data = TrainingSet,
method = "lm",
na.action = na.omit,
preProcess=c("scale","center"),
trControl= trainControl(method="none")
)
Model.training <-predict(Model, TrainingSet) # Apply model to make prediction on Training set
Model.testing <-predict(Model, TestingSet) # Apply model to make prediction on Testing set
plot(TrainingSet$MFR,Model.training, col = "blue" )
plot(TestingSet$MFR,Model.testing, col = "red" )
# Build Training model
Model <- train(MFR ~ ., data = TrainingSet,
method = "lm",
na.action = na.omit,
preProcess=c("scale","center"),
trControl= trainControl(method="none")
)
Model.training <-predict(Model, TrainingSet) # Apply model to make prediction on Training set
Model.testing <-predict(Model, TestingSet) # Apply model to make prediction on Testing set
plot(TrainingSet$MFR,Model.training, col = "blue" )
plot(TestingSet$MFR,Model.testing, col = "red" )
fitted(Model)
resid(Model)
summary(Model)
summary(Model)
fitted(Model)
resid(Model)
runApp()
summary(df)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
# Build Training model
Model <- train(MFR ~ Pressure, data = TrainingSet,
method = "lm",
na.action = na.omit,
preProcess=c("scale","center"),
trControl= trainControl(method="none")
)
Model.training <-predict(Model, TrainingSet) # Apply model to make prediction on Training set
Model.testing <-predict(Model, TestingSet) # Apply model to make prediction on Testing set
plot(TrainingSet$MFR,Model.training, col = "blue" )
plot(TestingSet$MFR,Model.testing, col = "red" )
summary(Model)
runApp('demoApp.R')
runApp('demoApp.R')
runApp('Backup')
install.packages(
"rsthemes",
repos = c(gadenbuie = 'https://gadenbuie.r-universe.dev', getOption("repos"))
)
runApp('Backup')
runApp()
View(TrainingIndex)
runApp()
runApp()
runApp()
ggplot(mtcars, aes(x=wt, y=mpg, color=cyl, shape=cyl)) +
geom_point() +
geom_smooth(method=lm)
library(ggplot2)
library(visreg)
library(caret)
df <- na.omit(select(pmfr, -Time))
head(df)
set.seed(100)
TrainingIndex <- createDataPartition(df$MFR, p=0.8, list = FALSE)
TrainingSet <- df[TrainingIndex,] # Training Set
TestingSet <- df[-TrainingIndex,] # Test Set
# Build Training model
Model <- train(MFR ~ Pressure, data = TrainingSet,
method = "lm",
na.action = na.omit,
preProcess=c("scale","center"),
trControl= trainControl(method="none")
)
Model.training <-predict(Model, TrainingSet) # Apply model to make prediction on Training set
Model.testing <-predict(Model, TestingSet) # Apply model to make prediction on Testing set
plot(TrainingSet$MFR,Model.training, col = "blue" )
plot(TestingSet$MFR,Model.testing, col = "red" )
runApp()
runApp()
runApp()
runApp()
runApp()
linearModel <- lm(MFR, Pressure)
linearModel <- lm(df$MFR, df$Pressure)
linearModel <- lm(df$MFR ~ df$Pressure)
View(linearModel)
linearModel <- lm(MFR ~ Pressure, data = TrainingSet)
View(linearModel)
View(linearModel)
runApp()
runApp()
paste("j", "~.")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp('Backup')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(reducedData)
View(reducedData)
View(pmfr)
View(pmfr)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(ggplot2)
library(visreg)
library(caret)
set.seed(100)
TrainingIndex <- createDataPartition(df$MFR, p=0.8, list = FALSE)
TrainingSet <- df[TrainingIndex,] # Training Set
TestingSet <- df[-TrainingIndex,] # Test Set
# Build Training model
Model <- train(MFR ~ Pressure, data = TrainingSet,
method = "lm",
na.action = na.omit,
preProcess=c("scale","center"),
trControl= trainControl(method="none")
)
Model.training <-predict(Model, TrainingSet) # Apply model to make prediction on Training set
Model.testing <-predict(Model, TestingSet) # Apply model to make prediction on Testing set
plot(TrainingSet$MFR,Model.training, col = "blue" )
plot(TestingSet$MFR,Model.testing, col = "red" )
plot(TrainingSet$MFR,Model.training, col = "blue" )
plot(TestingSet$MFR,Model.testing, col = "red" )
runApp()
runApp()
shiny::runApp()
runApp('Backup')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp('Backup')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp('Backup')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(ggplot2)
library(visreg)
library(caret)
df <- na.omit(select(pmfr, -Time))
head(df)
set.seed(100)
TrainingIndex <- createDataPartition(df$MFR, p=0.8, list = FALSE)
TrainingSet <- df[TrainingIndex,] # Training Set
TestingSet <- df[-TrainingIndex,] # Test Set
# Build Training model
Model <- train(MFR ~ Pressure, data = TrainingSet,
method = "lm",
na.action = na.omit,
preProcess=c("scale","center"),
trControl= trainControl(method="none")
)
Model.training <-predict(Model, TrainingSet) # Apply model to make prediction on Training set
Model.testing <-predict(Model, TestingSet) # Apply model to make prediction on Testing set
plot(TrainingSet$MFR,Model.training, col = "blue" )
plot(TestingSet$MFR,Model.testing, col = "red" )
summary(Model)
linearModel <- lm(MFR ~ ., data = TrainingSet)
visreg(linearModel)
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp('Backup')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.package("plsdepot")
runApp('myApp.R')
runApp('myApp.R')
runApp('myApp.R')
runApp('myApp.R')
runApp('myApp.R')
runApp('myApp.R')
runApp('myApp.R')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
z <- TestingSet[,$MFR]
z <- TestingSet[,MFR]
z <- TestingSet[MFR]
View(TestingSet)
runApp()
runApp()
View(TestingSet)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('myApp.R')
runApp('myApp.R')
runApp('myApp.R')
runApp('myApp.R')
runApp('myApp.R')
runApp('myApp.R')
runApp('myApp.R')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?shape()
?dim()
?dim
runApp()
?type
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?as.list
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(linearModel)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages("GGally")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
